pipeline {
    agent any

    environment {
        PROJECT_HOME = "${WORKSPACE}"
        GIT_BRANCH = 'jenkins-workshop'
        GIT_URI = 'https://github.com/kobi070/devopshift-welcome.git'
    }

    stages{

        stage('Initial Setup') {
            steps{
                script{
                        // Define a reusable function
                        def runStage = { stageName, command ->
                                        stage(stageName) {
                                            echo "Starting stage: ${stageName}"
                                            sh command }
                    }
                }
            }
        }
        stage('Clone Repository') {
            steps {
                runStage('Clone', "Clone ${GIT_URI}")
            }
        }

        stage('Build from Github') {
            steps {
                runStage('Build', "Build Python project")
            }
        }

        stage('Parallel Tests') {
            steps {
                script {
                    parallel(
                        "Lint": {
                            stage('Lint') {
                                runStage('Lint', "Running Python linting (e.g., flake8)...")
                            }
                        },
                        "Security Test": {
                            stage('Security Test') {
                                runStage('Security Test', "Running security checks (e.g., bandit)...")
                            }
                        },
                        failFast: true // Fail pipeline if any parallel stage fails
                    )
                }
            }
        }

        stage('Deploy to Dev') {
            steps {
                script {
                    def userInput = input message: 'Do you want to deploy to Dev?',
                        parameters: [choice(name: 'Proceed', choices: ['Proceed', 'Abort'])]

                    env.USER_CHOICE = userInput
                }
            }
        }

        stage('Abort Deployment') {
            when {
                expression { env.USER_CHOICE == 'Abort' }
            }
            steps {
                runStage('Abort', "Aborting deployment...")
            }
        }

        stage('Proceed with Deployment') {
            when {
                expression { env.USER_CHOICE == 'Proceed' }
            }
            steps {
                echo "Deploying Python project to production..."
                runStage('Deploy', "Deploying Python project to production...")
            }
        }

        stage('Cleanup') {
            steps {
                runStage('Cleanup', "Cleaning up workspace...")
            }
        }
    }
}
