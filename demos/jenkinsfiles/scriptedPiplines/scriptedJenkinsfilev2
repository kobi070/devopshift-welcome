pipeline {
    agent any

    environment {
        PROJECT_HOME = "${WORKSPACE}"
        GIT_BRANCH = 'jenkins-workshop'
        GIT_URI = 'https://github.com/kobi070/devopshift-welcome.git'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Initializing pipeline..."
                    def runStage = { stageName, command ->
                        stage(stageName) {
                            echo "Starting stage: ${stageName}"
                            sh command
                        }
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    echo "Cloning repository..."
                    sh "git clone -b ${GIT_BRANCH} ${GIT_URI} ${PROJECT_HOME}"
                }
            }
        }

        stage('Build from Github') {
            steps {
                script {
                    echo "Building Python project..."
                    sh "echo 'Simulating build process...'"
                }
            }
        }

        stage('Parallel Tests') {
            parallel {
                stage('Lint') {
                    steps {
                        script {
                            echo "Running Python linting (e.g., flake8)..."
                        }
                    }
                }
                stage('Security Test') {
                    steps {
                        script {
                            echo "Running security checks (e.g., safety)..."
                        }
                    }
                }
            }
        }

        stage('Deploy to Dev') {
            steps {
                script {
                    def userInput = input message: 'Do you want to deploy to Dev?',
                        parameters: [choice(name: 'Proceed', choices: ['Proceed', 'Abort'])]
                    env.USER_CHOICE = userInput
                }
            }
        }

        stage('Abort Deployment') {
            when {
                expression { env.USER_CHOICE == 'Abort' }
            }
            steps {
                script {
                    echo "Deployment Aborted"
                }
            }
        }

        stage('Proceed with Deployment') {
            when {
                expression { env.USER_CHOICE == 'Proceed' }
            }
            steps {
                script {
                    echo "Deploying Python project to production..."
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up workspace..."
                    sh "rm -rf ${PROJECT_HOME}"
                }
            }
        }
    }
}
