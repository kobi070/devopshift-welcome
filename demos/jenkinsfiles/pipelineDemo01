pipeline{
    agent any

    environment{
        FLASK_ENV = 'development'
        PROJECT_HOME = "${WORKSPACE}"
        GIT_BRANCH = 'jenkins-workshop'
        GIT_URI = 'https://github.com/kobi070/devopshift-welcome.git'
    }

    stages{
        stage('Stage 1 - Clone Git Project'){
            steps{
                script{
                    sh '''#!/bin/bash
                echo "Git branch $GIT_BRANCH"
                echo "Git Uri $GIT_URI"
                echo "Cloning $GIT_BRANCH from $GIT_URI"
                    '''
                }
            }
        }

        stage('Stage 2 - Setup Enviromment and Install Dependcies'){
            steps{
                script{
                    sh'''#!/bin/bash
                    echo "Installing virtualenv"
                    echo "pip install virtualenv"
                    echo "Delete prev built venv and create a new one"
                    echo "rm -rf $PROJECT_HOME"
                    echo "virtualenv $PROJECT_HOME"
                    echo "source $PROJECT_HOME/bin/activate"
                    echo "Install req py packages"
                    echo "pip install -r req.txt"
                    '''
                }
            }
        }

        stage('Stage 3 - Run Flask Application'){
            steps{
                script{
                    echo "source $PROJECT_HOME/bin/activate"
                    echo "Gets tasks"
                    echo "Starting Flask App on 0.0.0.0:5005"
                    echo "nohup flask run --host=0.0.0.0 --port=5005 > flask_app."
                }
            }
        }

        stage('Stage 4 - Wait for User Approvel'){
            steps{
                script{
                    def userInput = input message: 'Is the App Running ?',
                                        parameters: [choice(name:'Procced', choices:['Procced', 'Aboart'])]
                    env.USER_CHOICE = userInput
                }
            }
        }

        stage('Stage 5 - Abort the Pipeline'){
            when{
                expression {env.USER_CHOICE == 'Abort'}
            }
            steps{
                script{
                    error 'Pipeline aboarted by the user'
                }
            }
        }

        stage('Stage 5 - Verify App'){
            steps{
                script{
                    echo "Flask App is Running !"
                }
            }
        }
    }
}

 post{
    success{
        if(env.USER_CHOICE == 'Procced'){
            echo 'Pipeline completed succesfully'
        }
    }
    aboarted{
        script{
            if(env.USER_CHOICE == 'Abort'){
                echo 'Pipline aborted by user'
            }
        }
    }
    always{
        script{
            echo 'This will always echo cause this is in post with always annotation'
        }
    }
 }