pipeline {
    agent any

    // Define environment variables
    environment {
        PYTHON_VERSIONS = '3.8, 3.9'  // TIP: Define an array for the Python docker image tag versions for testing and building (ex. 3.8, 3.9)
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'  // TIP: Add DockerHub credentials in Jenkins and reference them here
        REPO_NAME = 'kobi070/demo-app'  // TIP: Replace with your DockerHub repository name
        GIT_REPO_URL = 'https://github.com/kobi070/devopshift-welcome.git'  // The repository URL
        REPO_BRANCH = 'jenkins-workshop'  // The commit hash to reference
    }

    stages {
            stage('Clone Repository') {
                steps {
                    // Clone the repository containing the Python script and Dockerfile
                    git REPO_BRANCH: "${GITHUB_BRANCH}", GIT_REPO_URL: "${GITHUB_REPO}"
                }
            }

            stage('Install Dependencies') {
                agent {
                    docker {
                        image 'python:3.8' // Use a Python image for dependency installation
                        args '-v $HOME/.cache/pip:/root/.cache/pip' // Caching pip dependencies to speed up builds
                    }
                }
                steps {
                    sh 'pip install faker' // Install the required Python package
                }
            }

            stage('Test Application') {
                matrix {
                    axes {
                        axis {
                            name 'PYTHON_VERSION'
                            values '3.8', '3.9'
                        }
                    }
                    stages {
                        stage('Run Test') {
                            agent {
                                docker {
                                    image "python:${PYTHON_VERSION}" // Use the Python version from the matrix
                                    reuseNode true // Reuse the same agent to prevent unnecessary overhead
                                }
                            }
                            steps {
                                sh """
                                pip install faker
                                wget https://raw.githubusercontent.com/nashpaz123/devopshift-welcome/refs/heads/jenkins-workshop/welcome/app/faker/app.py
                                wget https://raw.githubusercontent.com/nashpaz123/devopshift-welcome/refs/heads/jenkins-workshop/welcome/app/faker/Dockerfile
                                python app.py
                                """
                            }
                        }
                    }
                }
            }

            stage('Build Docker Images') {
                matrix {
                    axes {
                        axis {
                            name 'PYTHON_VERSION'
                            values '3.8', '3.9'
                        }
                    }
                    stages {
                        stage('Build Image') {
                            steps {
                                script {
                                    // Build the Docker image dynamically based on the Python version
                                    docker.build("${REPO_NAME}:${PYTHON_VERSION}", "--build-arg PYTHON_VERSION=${PYTHON_VERSION} .")
                                }
                            }
                        }
                    }
                }
            }

            stage('Push to DockerHub') {
                matrix {
                    axes {
                        axis {
                            name 'PYTHON_VERSION'
                            values '3.8', '3.9'
                        }
                    }
                    stages {
                        stage('Push Image') {
                            steps {
                                script {
                                    // Push the built image to DockerHub using DockerHub credentials
                                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                                        docker.image("${REPO_NAME}:${PYTHON_VERSION}").push() // Push each image
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        post {
            always {
                echo "Pipeline completed."
            }
        }
}
