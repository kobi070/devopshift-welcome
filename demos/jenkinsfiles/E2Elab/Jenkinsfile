pipeline {
    agent any

    // Define environment variables
    environment {
        PYTHON_VERSIONS = '3.8 3.9 3.10' // TIP: Define an array for the Python docker image tag versions for testing and building (ex. 3.3 â€¦)
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials' // TIP: Add DockerHub credentials in Jenkins and reference them here
        REPO_NAME = 'kobi070/demo-app' // TIP: Replace with your DockerHub repository name
    }

    stages {
        stage('Install Dependencies') {
            agent {
                docker {
                    image 'python:3.10' // TIP: Use a Python image for installing dependencies or use the matrix
                    args '-v $HOME/.cache/pip:/root/.cache/pip' // TIP: Mount the pip cache for reuse in future stages (pip folder is: $HOME/.cache/pip:/root/.cache/pip')
                }
            }
            steps {
                // TIP: Run a command to install the python faker library here ( pip instal ...)
                sh 'ls -l'
                sh 'pip install faker'
                sh 'wget https://raw.githubusercontent.com/kobi070/devopshift-welcome/e107bdbf616df2c046ad5d7f4fcedf179e5dedff/welcome/app/faker/app.py'
                sh 'wget https://raw.githubusercontent.com/kobi070/devopshift-welcome/e107bdbf616df2c046ad5d7f4fcedf179e5dedff/welcome/app/faker/Dockerfile'
            }
        }

        stage('Test Application') {
            matrix {
                axes {
                    axis {
                        name 'PYTHON_VERSIONS' // TIP: Name your axis to reference the Python version
                        values '3.8', '3.9', '3.10' // TIP: OPTIONAL Use the environment variable for versions by force / override definitions  here
                    }
                }
                stages {
                    stage('Run Test') {
                        agent {
                            docker {
                                image 'python:${PYTHON_VERSIONS}' // TIP: Dynamically select the Python version from the matrix
                                reuseNode true // TIP: Reuse the workspace for Docker containers
                            }
                        }
                        steps {
                            sh 'python app.py'      // TIP: Runs the Python script here and validate its output (expecting exit code 0 )
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            matrix {
                axes {
                    axis {
                        name 'PYTHON_VERSIONS' // TIP: Name your axis to reference the Python version
                        values '3.8', '3.9', '3.10' // TIP: Use the environment variable for versions or define it here
                    }
                }
                stages {
                    stage('Build Image') {
                        steps {
                            // TIP: Use docker.build with build arguments to build an image for the Python version
                            script {
                                // sh "docker build --build-arg PYTHON_VERSION=${PYTHON_VERSION} -t ${REPO_NAME}:${PYTHON_VERSION} ." // TIP: Use the Docker CLI to build the image
                                docker.build("${REPO_NAME}:${PYTHON_VERSIONS}", "--build-arg PYTHON_VERSION=${PYTHON_VERSIONS}", "-t ${REPO_NAME}:${PYTHON_VERSION}")
                            } 
                        }
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            matrix {
                axes {
                    axis {
                        name 'PYTHON_VERSIONS' // TIP: Name your axis to reference the Python version
                        values '3.8', '3.9', '3.10' // TIP: Use the environment variable for versions or define it here
                    }
                }
                stages {
                    stage('Push Image') {
                        steps {
                            // TIP: Use docker.withRegistry to authenticate and push the image to DockerHub
                            script{
                                docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS) {
                                    def appImage = docker.image("${REPO_NAME}:${PYTHON_VERSIONS}")
                                    appImage.push()
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
            // Clean up Docker images for each Python version
            script {
                def pythonVersions = ['3.8', '3.9', '3.10']
                pythonVersions.each { version ->
                    sh "docker rmi -f ${REPO_NAME}:${version}"
                }
            }
        }
    }
}