@Library('my-shared-library') _

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script {
                    // Call a shared library function
                    myLibrary.buildApp()
                }
            }
        }

        stage('Test') {
            steps{
                script{
                    myLibrary.testApp()
                }
            }
        }

        stage('Stage for a few groovy functions') {
            steps{
                script{
                    myLibrary.whichBranch(env.BRANCH_NAME)
                    myLibrary.getVersion()
                }
            }
        }

        stage('Ask user to abort')  // This stage will only run if the previous stage fails{
            steps{
                script{
                    def userChoice = myLibrary.askUserToAboart()
                    if(userChoice == 'Abort'){
                        error('User aborted the deployment')
                        exit(1)
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Use another function from the shared library
                    myLibrary.deployApp(env.BRANCH_NAME)
                }
            }
        }
    }

    post {
        always {
            script {
                // Call a cleanup function from the shared library
                myLibrary.cleanup()
            }
        }
        abort{
            script{
                echo "The deployment was aborted"
            }
        }
        proceed{
            script{
                echo "The deployment was successful"
            }
        }
    }
}